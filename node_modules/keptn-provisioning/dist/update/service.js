"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateService = void 0;
const resource_service_1 = require("../api/schemes/resource-service");
const control_plane_1 = require("../api/schemes/control-plane");
const api_service_1 = require("../api/schemes/api-service");
const requests_1 = require("../api/requests");
const body_1 = require("../api/body");
async function updateService(project, auth) {
    for (const stage of project.stages) {
        for (const service of project.services) {
            const controlPlane = (0, control_plane_1.generateControlPlaneScheme)(project.name, stage.name, service.name);
            const resourceService = (0, resource_service_1.generateResourceServiceScheme)(project.name, stage.name, service.name);
            const apiService = (0, api_service_1.generateAPIServiceScheme)();
            console.log(`KEPTN: Service: ${service.name}. Project: ${project.name}. Stage: ${stage.name}`);
            if ((await (0, requests_1.sendRequest)(controlPlane, auth, 'getServiceByName'))
                .code === 404) {
                console.log('KEPTN: Action: create new service');
                await (0, requests_1.sendRequest)(controlPlane, auth, 'createNewService', `{"serviceName": "${service.name}"}`);
                if (service.workdir) {
                    await (0, requests_1.sendRequest)(resourceService, auth, 'createServiceResources', (0, body_1.generateServiceResourceBody)(service.workdir));
                }
                console.log('KEPTN: Service created.');
            }
            else {
                console.log('KEPTN: Action: update exist service');
                if (service.workdir) {
                    console.log('KEPTN: Delete previous service resources.');
                    const allServiceResources = await (0, requests_1.sendRequest)(resourceService, auth, 'getListProjectResources');
                    for (const resource of allServiceResources.resources) {
                        await (0, requests_1.sendRequest)((0, resource_service_1.generateResourceServiceScheme)(project.name, stage.name, service.name, resource.resourceURI), auth, 'deleteServiceResources');
                    }
                    await (0, requests_1.sendRequest)(resourceService, auth, 'updateServiceResources', (0, body_1.generateServiceResourceBody)(service.workdir));
                }
                console.log('KEPTN: Uploaded new service resources');
            }
            if (service.monitoring) {
                if (service.monitoring.enabled) {
                    await (0, requests_1.sendRequest)(apiService, auth, 'forwardsReceivedEvent', (0, body_1.generateMonitorinEventBody)(project.name, service.name, service.monitoring.type));
                    console.log('KEPTN: Enable monitoring');
                }
            }
        }
    }
    console.log('KEPTN: Creation/Update finished.');
}
exports.updateService = updateService;
