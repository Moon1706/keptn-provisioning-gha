"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProject = void 0;
const rest_1 = require("@octokit/rest");
const control_plane_1 = require("../api/schemes/control-plane");
const requests_1 = require("../api/requests");
const body_1 = require("../api/body");
async function updateProject(project, auth) {
    const apiURL = new URL(project.github.url);
    if (project.github.isEnterprise) {
        apiURL.pathname = `/api/v3`;
    }
    else {
        apiURL.hostname = `api.${apiURL.hostname}`;
    }
    const github = new rest_1.Octokit({
        auth: project.github.token,
        baseUrl: apiURL.href.replace(/\/$/, ''),
    });
    try {
        console.log(`KEPTN: check Github repo '${apiURL}/${project.github.owner}/${project.github.repo}'`);
        await github.rest.repos.get({
            owner: project.github.owner,
            repo: project.github.repo,
        });
    }
    catch (err) {
        try {
            const checkError = err;
            if (checkError.status === 404) {
                console.log(`KEPTN: repo '${apiURL}/${project.github.owner}/${project.github.repo}' doesn't exist. Creation new repo.`);
                if (project.github.isOrganization) {
                    await github.rest.repos.createInOrg({
                        org: project.github.owner,
                        name: project.github.repo,
                        private: project.github.isPrivateRepo,
                    });
                }
                else {
                    await github.rest.repos.createForAuthenticatedUser({
                        name: project.github.repo,
                        private: project.github.isPrivateRepo,
                    });
                }
                console.log(`KEPTN: repo '${apiURL}/${project.github.owner}/${project.github.repo}' was created.`);
            }
            else {
                console.log(`KEPTN: Error! Repo: '${apiURL}/${project.github.owner}/${project.github.repo}', Status code: ${checkError.status}`);
                throw new Error();
            }
        }
        catch (err2) {
            const checkError = err2;
            console.log(`KEPTN: Error with creation repo! Message: '${checkError.message}', URL: ${checkError.request.url}, Method: ${checkError.request.method}, Body: ${checkError.request.body} Status: '${checkError.status}'`);
            throw new Error(`KEPTN: Error! Problem with checking/creation repo '${apiURL}/${project.github.owner}/${project.github.repo}'. Error ${err2}`);
        }
    }
    const controlPlane = (0, control_plane_1.generateControlPlaneScheme)(project.name);
    if ((await (0, requests_1.sendRequest)(controlPlane, auth, 'getProjectByName')).code === 404) {
        await (0, requests_1.sendRequest)(controlPlane, auth, 'createNewProject', (0, body_1.generateProjectBody)(project));
    }
    else {
        await (0, requests_1.sendRequest)(controlPlane, auth, 'updateProject', (0, body_1.generateProjectBody)(project));
    }
}
exports.updateProject = updateProject;
